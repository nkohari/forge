{"version":3,"sources":["../../src/resolvers/TypeResolver.js"],"names":["TypeResolver","constructor","forge","binding","type","inspector","findConstructor","name","dependencies","getDependencies","resolve","context","args","callArguments","resolveDependencies","toString"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAN,4BAAoC;;AAElCC,cAAYC,KAAZ,EAAmBC,OAAnB,EAA4BC,IAA5B,EAAkC;AAChC,UAAMF,KAAN,EAAaC,OAAb;AACA,0BAAO,MAAP,EAAeC,IAAf;AACA,SAAKA,IAAL,GAAYA,IAAZ;;AAEA,UAAMH,cAAc,KAAKC,KAAL,CAAWG,SAAX,CAAqBC,eAArB,CAAqC,KAAKF,IAA1C,CAApB;AACA,QAAI,CAACH,WAAL,EAAkB;AAChB,YAAM,iCAAuBE,QAAQI,IAA/B,EAAsC,4CAA2C,KAAKH,IAAL,CAAUG,IAAK,EAAhG,CAAN;AACD;;AAED,SAAKC,YAAL,GAAoB,KAAKN,KAAL,CAAWG,SAAX,CAAqBI,eAArB,CAAqCR,WAArC,CAApB;AACD;;AAEDS,UAAQC,OAAR,EAAiBC,IAAjB,EAAuB;AACrB,UAAMC,gBAAgB,KAAKC,mBAAL,CAAyBH,OAAzB,EAAkC,KAAKH,YAAvC,EAAqDI,IAArD,CAAtB;AACA,WAAO,IAAI,KAAKR,IAAT,CAAc,GAAGS,aAAjB,CAAP;AACD;;AAEDE,aAAW;AACT,WAAQ,QAAO,KAAKX,IAAL,CAAUG,IAAK,GAA9B;AACD;;AAtBiC;;kBA0BrBP,Y","file":"TypeResolver.js","sourcesContent":["import ensure from '../util/ensure';\nimport ConfigurationError from '../errors/ConfigurationError';\nimport Resolver from './Resolver';\n\nclass TypeResolver extends Resolver {\n\n  constructor(forge, binding, type) {\n    super(forge, binding);\n    ensure('type', type);\n    this.type = type;\n\n    const constructor = this.forge.inspector.findConstructor(this.type);\n    if (!constructor) {\n      throw new ConfigurationError(binding.name, `Cannot resolve constructor to inject for ${this.type.name}`);\n    }\n\n    this.dependencies = this.forge.inspector.getDependencies(constructor);\n  }\n\n  resolve(context, args) {\n    const callArguments = this.resolveDependencies(context, this.dependencies, args);\n    return new this.type(...callArguments);\n  }\n\n  toString() {\n    return `type{${this.type.name}}`;\n  }\n\n}\n\nexport default TypeResolver;\n"]}