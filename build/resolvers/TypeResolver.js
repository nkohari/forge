// Generated by CoffeeScript 1.10.0
(function() {
  var Resolver, TypeResolver, _, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('assert');

  _ = require('underscore');

  Resolver = require('./Resolver');

  TypeResolver = (function(superClass) {
    extend(TypeResolver, superClass);

    function TypeResolver(forge, binding, type1) {
      var constructor;
      this.type = type1;
      TypeResolver.__super__.constructor.call(this, forge, binding);
      assert(this.type != null, 'The argument "type" must have a value');
      constructor = this.findConstructorToInspect(this.type);
      this.dependencies = this.forge.inspector.getDependencies(constructor);
    }

    TypeResolver.prototype.resolve = function(context, args) {
      var ctor;
      args = this.resolveDependencies(context, this.dependencies, args);
      ctor = this.type.bind.apply(this.type, [null].concat(args));
      return new ctor();
    };

    TypeResolver.prototype.findConstructorToInspect = function(type) {
      var constructor;
      constructor = type;
      while (this.forge.inspector.isAutoConstructor(constructor)) {
        constructor = constructor.__super__.constructor;
      }
      return constructor;
    };

    TypeResolver.prototype.toString = function() {
      return "type{" + this.type.name + "}";
    };

    return TypeResolver;

  })(Resolver);

  module.exports = TypeResolver;

}).call(this);
