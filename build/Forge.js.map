{"version":3,"sources":["../src/Forge.js"],"names":["Forge","constructor","config","bindings","unmangleNames","inspector","bind","name","validateName","binding","list","push","unbind","count","length","rebind","get","hint","args","resolve","getOne","context","getMatchingBindings","resolveBindings","getAll","undefined","create","type","filter","matches","all","results","map","inspect","lines","Object","keys","forEach","toString","join","test"],"mappings":"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","file":"Forge.js","sourcesContent":["import ensure from './util/ensure';\nimport Binding from './Binding';\nimport Context from './Context';\nimport Inspector from './Inspector';\nimport ConfigurationError from './errors/ConfigurationError';\nimport ResolutionError from './errors/ResolutionError';\n\nclass Forge {\n\n  constructor(config = {}) {\n    this.bindings = {};\n    this.unmangleNames = (config.unmangleNames != null) ? config.unmangleNames : true;\n    this.inspector = config.inspector || new Inspector(this.unmangleNames);\n  }\n\n  bind(name) {\n    ensure('name', name);\n    if (!this.validateName(name)) {\n      throw new ConfigurationError(name, 'Invalid name for binding');\n    }\n    const binding = new Binding(this, name);\n    const list = this.bindings[name] ? this.bindings[name] : (this.bindings[name] = []);\n    list.push(binding);\n    return binding;\n  }\n\n  unbind(name) {\n    ensure('name', name);\n    const count = (this.bindings[name] != null) ? this.bindings[name].length : 0;\n    this.bindings[name] = [];\n    return count;\n  }\n\n  rebind(name) {\n    ensure('name', name);\n    this.unbind(name);\n    return this.bind(name);\n  }\n\n  get(name, hint, args) {\n    ensure('name', name);\n    return this.resolve(name, new Context(), hint, false, args);\n  }\n\n  getOne(name, hint, args) {\n    ensure('name', name);\n    const context = new Context();\n    const bindings = this.getMatchingBindings(name, hint);\n    if (bindings.length === 0) {\n      throw new ResolutionError(name, hint, context, 'No matching bindings were available');\n    }\n    if (bindings.length !== 1) {\n      throw new ResolutionError(name, hint, context, 'Multiple matching bindings were available');\n    }\n    return this.resolveBindings(context, bindings, hint, args, false);\n  }\n\n  getAll(name, args) {\n    ensure('name', name);\n    const context = new Context();\n    const bindings = this.bindings[name];\n    if (!bindings || bindings.length === 0) {\n      throw new ResolutionError(name, undefined, context, 'No matching bindings were available');\n    }\n    return this.resolveBindings(context, bindings, undefined, args, true);\n  }\n\n  create(type, args) {\n    ensure('type', type);\n    const context = new Context();\n    const binding = new Binding(this, type.constructor.name).type(type);\n    return this.resolveBindings(context, [binding], undefined, args, false);\n  }\n\n  getMatchingBindings(name, hint) {\n    ensure('name', name);\n    if (!this.bindings[name]) {\n      return [];\n    } else {\n      return this.bindings[name].filter(binding => binding.matches(hint));\n    }\n  }\n\n  resolve(name, context, hint, all, args) {\n    ensure('name', name);\n\n    if (context == null) context = new Context();\n    const bindings = all ? this.bindings[name] : this.getMatchingBindings(name, hint);\n\n    if (!bindings || bindings.length === 0) {\n      throw new ResolutionError(name, hint, context, 'No matching bindings were available');\n    }\n\n    return this.resolveBindings(context, bindings, hint, args, all);\n  }\n\n  resolveBindings(context, bindings, hint, args, all) {\n    const results = bindings.map(binding => binding.resolve(context, hint, args));\n    if (!all && results.length === 1) {\n      return results[0];\n    } else {\n      return results;\n    }\n  }\n\n  inspect() {\n    const lines = [];\n    Object.keys(this.bindings).forEach(name => {\n      this.bindings[name].forEach(binding => {\n        lines.push(binding.toString());\n      });\n    });\n    return lines.join('\\n');\n  }\n\n  validateName(name) {\n    if (this.unmangleNames) {\n      return /[^\\d]$/.test(name);\n    } else {\n      return true;\n    }\n  }\n}\n\nexport default Forge;\n"]}