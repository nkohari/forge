{"version":3,"sources":["../src/Inspector.js"],"names":["Inspector","getDependencies","func","params","getParameterNames","hints","getDependencyHints","map","param","name","all","hint","undefined","regex","matches","exec","toString","length","args","split","unmangleNames","arg","replace","match","Array","from","pattern","argument","allString","dependency","indexOf","findConstructor","type","candidate","Function","prototype","Object","getPrototypeOf"],"mappings":";;;;;;;;AAAA;;;;;;AAEA,MAAMA,SAAN,CAAgB;;AAEdC,kBAAgBC,IAAhB,EAAsB;AACpB,0BAAO,MAAP,EAAeA,IAAf;AACA,UAAMC,SAAS,KAAKC,iBAAL,CAAuBF,IAAvB,CAAf;AACA,UAAMG,QAAQ,KAAKC,kBAAL,CAAwBJ,IAAxB,CAAd;AACA,WAAOC,OAAOI,GAAP,CAAWC,SAASH,MAAMG,KAAN,KAAgB,EAAEC,MAAMD,KAAR,EAAeE,KAAK,KAApB,EAA2BC,MAAMC,SAAjC,EAApC,CAAP;AACD;;AAEDR,oBAAkBF,IAAlB,EAAwB;AACtB,0BAAO,MAAP,EAAeA,IAAf;;AAEA,UAAMW,QAAQ,iDAAd;AACA,UAAMC,UAAUD,MAAME,IAAN,CAAWb,KAAKc,QAAL,EAAX,CAAhB;;AAEA,QAAIF,WAAW,IAAX,IAAmBA,QAAQ,CAAR,EAAWG,MAAX,KAAsB,CAA7C,EAAgD;AAC9C,aAAO,EAAP;AACD;;AAED,UAAMC,OAAOJ,QAAQ,CAAR,EAAWK,KAAX,CAAiB,QAAjB,CAAb;;AAEA,QAAI,KAAKC,aAAT,EAAwB;AACtB,aAAOF,KAAKX,GAAL,CAASc,OAAOA,IAAIC,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAOJ,IAAP;AACD;AACF;;AAEDZ,qBAAmBJ,IAAnB,EAAyB;AACvB,0BAAO,MAAP,EAAeA,IAAf;;AAEA,UAAMW,QAAQ,kCAAd;AACA,UAAMR,QAAQ,EAAd;;AAEA,QAAIkB,KAAJ;AACA,WAAOA,QAAQV,MAAME,IAAN,CAAWb,KAAKc,QAAL,EAAX,CAAf,EAA4C;AAAA,wBACSQ,MAAMC,IAAN,CAAWF,KAAX,CADT;AAAA;;AAAA,YACnCG,OADmC;AAAA,YAC1BC,QAD0B;AAAA,YAChBC,SADgB;AAAA,YACLC,UADK;;AAE1C,YAAMnB,MAAMkB,aAAa,IAAzB;AACA,UAAIC,WAAWC,OAAX,CAAmB,GAAnB,CAAJ,EAA6B;AAAA,2BACNN,MAAMC,IAAN,CAAWI,WAAWV,KAAX,CAAiB,SAAjB,EAA4B,CAA5B,CAAX,CADM;AAAA;;AAAA,cACpBV,IADoB;AAAA,cACdE,IADc;;AAE3BN,cAAMsB,QAAN,IAAkB,EAAElB,IAAF,EAAQC,GAAR,EAAaC,IAAb,EAAlB;AACD,OAHD,MAGO;AACLN,cAAMsB,QAAN,IAAkB,EAAElB,MAAMoB,UAAR,EAAoBnB,GAApB,EAAyBC,MAAMC,SAA/B,EAAlB;AACD;AACF;;AAED,WAAOP,KAAP;AACD;;AAED0B,kBAAgBC,IAAhB,EAAsB;AACpB,0BAAO,MAAP,EAAeA,IAAf;;AAEA,QAAIC,YAAYD,IAAhB;AACA,WAAOC,cAAcC,SAASC,SAA9B,EAAyC;AACvC,UAAI,KAAK/B,iBAAL,CAAuB6B,SAAvB,EAAkChB,MAAlC,GAA2C,CAA/C,EAAkD;AAChD,eAAOgB,SAAP;AACD;AACDA,kBAAYG,OAAOC,cAAP,CAAsBJ,SAAtB,CAAZ;AACD;;AAED,WAAOD,IAAP;AACD;;AA7Da;;kBAiEDhC,S","file":"Inspector.js","sourcesContent":["import ensure from './util/ensure';\n\nclass Inspector {\n\n  getDependencies(func) {\n    ensure('func', func);\n    const params = this.getParameterNames(func);\n    const hints = this.getDependencyHints(func);\n    return params.map(param => hints[param] || { name: param, all: false, hint: undefined });\n  }\n\n  getParameterNames(func) {\n    ensure('func', func);\n\n    const regex = /(?:function|constructor)[ A-Za-z0-9]*\\(([^)]*)/g;\n    const matches = regex.exec(func.toString());\n\n    if (matches == null || matches[1].length === 0) {\n      return [];\n    }\n\n    const args = matches[1].split(/[,\\s]+/);\n\n    if (this.unmangleNames) {\n      return args.map(arg => arg.replace(/\\d+$/, ''));\n    } else {\n      return args;\n    }\n  }\n\n  getDependencyHints(func) {\n    ensure('func', func);\n\n    const regex = /\"(.*?)\\s*->\\s*(all)?\\s*(.*?)\";/gi;\n    const hints = {};\n\n    let match;\n    while (match = regex.exec(func.toString())) {\n      const [pattern, argument, allString, dependency] = Array.from(match);\n      const all = allString != null;\n      if (dependency.indexOf(':')) {\n        const [name, hint] = Array.from(dependency.split(/\\s*:\\s*/, 2));\n        hints[argument] = { name, all, hint };\n      } else {\n        hints[argument] = { name: dependency, all, hint: undefined };\n      }\n    }\n\n    return hints;\n  }\n\n  findConstructor(type) {\n    ensure('type', type);\n\n    let candidate = type;\n    while (candidate !== Function.prototype) {\n      if (this.getParameterNames(candidate).length > 0) {\n        return candidate;\n      }\n      candidate = Object.getPrototypeOf(candidate);\n    }\n\n    return type;\n  }\n\n}\n\nexport default Inspector;\n"]}